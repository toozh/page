<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						   http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd"
       default-lazy-init="false">

    <!-- alibaba数据源 -->
    <bean name="SQLServerDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源名称 -->
        <property name="name" value="SQLServerDuid"/>
        <!-- 基本链接 -->
        <property name="driverClassName" value="${framework.sqlserver_driverClassName}"/>
        <property name="url" value="${framework.sqlserver_jdbc_url}"/>
        <property name="username" value="${framework.sqlserver_jdbc_username}"/>
        <property name="password" value="${framework.sqlserver_jdbc_password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${framework.jdbc.initialSize}"/>
        <property name="minIdle" value="${framework.jdbc.minIdle}"/>
        <property name="maxActive" value="${framework.jdbc.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${framework.jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${framework.jdbc.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${framework.jdbc.minEvictableIdleTimeMillis}"/>
        <!-- PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。-->
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 配置监控统计拦截的filters 防止SQL注入,监控 -->
        <property name="filters" value="stat" ></property>
    </bean>

    <!-- sessionfactory -->
    <bean id="SQLServerSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="SQLServerDataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations" value="classpath*:com/yzmy/tvgamer/mapperxml/*Mapper.xml"/>
        <property name="plugins">
            <bean class="com.yzmy.tvgamer.core.interceptor.MybatisSpringPageInterceptor">
            </bean>
        </property>
    </bean>
    <!-- mybatis mapper自动扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yzmy.tvgamer.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="SQLServerSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="SQLServerTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="SQLServerDataSource"/>
    </bean>
    <!-- 注解方式配置事务
    <tx:annotation-driven transaction-manager="SQLServerTransactionManager"/>-->
    <!-- SQLSERVER事务管理  -->
    <tx:advice id="SQLServerFrameworkTxAdvice" transaction-manager="SQLServerTransactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="remove*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="modify*" propagation="REQUIRED" read-only="false"/>

            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="view*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="SQLServerTransactionPointCut" expression="execution(* com.yzmy.tvgamer.business.impl.*.*.*(..))  || execution(* com.yzmy.tvgamer.core.abs.AbstractServiceImpl.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="SQLServerFrameworkTxAdvice" pointcut-ref="SQLServerTransactionPointCut"></aop:advisor>
    </aop:config>
</beans>